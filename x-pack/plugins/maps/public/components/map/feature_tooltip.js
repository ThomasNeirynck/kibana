/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import React, { Fragment } from 'react';
import { EuiFlexGroup, EuiFlexItem, EuiButtonIcon } from '@elastic/eui';
import { i18n } from '@kbn/i18n';


export class FeatureTooltip extends React.Component {

  _renderFilterButton(tooltipProperty, hasFilters) {
    if (!this.props.isReadOnly || !hasFilters)  {
      return null;
    }


    let icon;
    if (tooltipProperty.isFilterable()) {
      icon = (<EuiButtonIcon
        iconType="logstashFilter"
        title="Filter on property"
        onClick={tooltipProperty.getFilterAction()}
        aria-label="Filter on property"
        className="mapFeatureTooltipFilterButton"
      />);
    } else {
      icon = null;
    }


    return (
      <EuiFlexItem className="mapFeatureTooltipFilterButton" style={{ 'width': '32px' }}>
        {icon}
      </EuiFlexItem>
    );
  }

  _renderProperties(hasFilters) {
    return this.props.properties.map((tooltipProperty, index) => {
      /*
       * Justification for dangerouslySetInnerHTML:
       * Property value contains value generated by Field formatter
       * Since these formatters produce raw HTML, this component needs to be able to render them as-is, relying
       * on the field formatter to only produce safe HTML.
       */
      const htmlValue = (<span
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML={{
          __html: tooltipProperty.getHtmlDisplayValue()
        }}
      />);

      return (
        <EuiFlexGroup key={index}>
          <EuiFlexItem style={{ 'width': '64px' }}>
            <strong>{tooltipProperty.getPropertyName()}</strong>
          </EuiFlexItem>
          <EuiFlexItem style={{ 'width': '128px' }}>
            {htmlValue}
          </EuiFlexItem>
          {this._renderFilterButton(tooltipProperty, hasFilters)}
        </EuiFlexGroup>
      );
    });
  }

  render() {

    const hasFilterableProperties = this.props.properties.some(prop => {
      return prop.isFilterable();
    });
    return (
      <Fragment>
        <EuiFlexGroup direction="column" gutterSize="none">
          <EuiFlexItem grow={true}>
            <EuiFlexGroup alignItems="flexEnd" direction="row" justifyContent="spaceBetween">
              <EuiFlexItem>&nbsp;</EuiFlexItem>
              <EuiFlexItem grow={false}>
                <EuiButtonIcon
                  onClick={this.props.onCloseClick}
                  iconType="cross"
                  aria-label={i18n.translate('xpack.maps.tooltip.closeAreaLabel', {
                    defaultMessage: 'Close tooltip'
                  })}
                />
              </EuiFlexItem>
            </EuiFlexGroup>
          </EuiFlexItem>
          <EuiFlexItem>
            <EuiFlexGroup direction="column" gutterSize="none">
              {this._renderProperties(hasFilterableProperties)}
            </EuiFlexGroup>
          </EuiFlexItem>
        </EuiFlexGroup>
      </Fragment>
    );
  }
}

