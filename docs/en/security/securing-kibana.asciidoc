[role="xpack"]
[[using-kibana-with-security]]
== Configuring Security in {kib}
++++
<titleabbrev>Configuring Security</titleabbrev>
++++

{kib} users have to log in when {security} is enabled on your cluster. You
configure {security} roles for your {kib} users to control what data those users
can access.

Most requests made through {kib} to {es} are authenticated by using the
credentials of the logged-in user. There are, however, a few internal requests
that the {kib} server needs to make to the {es} cluster. For this reason, you
must configure credentials for the {kib} server to use for those requests.

With {security} enabled, if you load a {kib} dashboard that accesses data in an
index that you are not authorized to view, you get an error that indicates the
index does not exist. {security} do not currently provide a way to control which
users can load which dashboards.

To use {kib} with {security}:

. <<installing-xpack-kb,Install {xpack} into {kib}>> to secure user sessions and
enable users to log in and out of {kib}.

.. Set the `xpack.security.encryptionKey` property in the `kibana.yml`
configuration file. You can use any text string that is 32 characters or longer
as the encryption key.
+
--
[source,yaml]
--------------------------------------------------------------------------------
xpack.security.encryptionKey: "something_at_least_32_characters"
--------------------------------------------------------------------------------
--

.. To change the default session duration, set the `xpack.security.sessionTimeout`
property in the `kibana.yml` configuration file. By default, sessions will stay
active until the browser is closed. The timeout is specified in milliseconds.
For example, set the timeout to 600000 to expire sessions after 10 minutes:
+
--
[source,yaml]
--------------------------------------------------------------------------------
xpack.security.sessionTimeout: 600000
--------------------------------------------------------------------------------
--

. Configure the password for the built-in `kibana` user. The {kib} server
submits requests as this user to access the cluster monitoring APIs and the
`.kibana` index. The server does _not_ need access to user indices.
+
--
The password for this user is typically set as part of the {xpack} installation
process on {es}. See
{ref}/installing-xpack-es.html[Installing X-Pack on {es}]. The user will not be
enabled until a password is set. You can update passwords from the
**Management > Users** UI in {kib}, use the `setup-passwords` tool, or use the
security user API. For example:

[source,shell]
--------------------------------------------------------------------------------
PUT /_xpack/security/user/kibana/_password
{
  "password" : "s0m3th1ngs3cr3t"
}
--------------------------------------------------------------------------------
// CONSOLE

For more information, see {ref}/security-api-users.html[User Management APIs].
Once you change the password, you need to specify it with the
`elasticsearch.password` property in `kibana.yml`:

[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.password: "s0m3th1ngs3cr3t"
--------------------------------------------------------------------------------
--

[[kibana-roles]]
. Configure {kib} authentication to grant them the privileges they need to use {kib}.
+
--
You can manage roles on the *Management / Security / Roles* page in {kib}.

If you're using the native realm with Basic Authentication, you can assign roles using the
*Management / Security / Users* page in {kib}, or the User Management API. For example, the following creates a user
named `jacknich` and assigns it the `kibana_user` role:

[source,js]
--------------------------------------------------------------------------------
POST /_xpack/security/user/jacknich
{
  "password" : "t0pS3cr3t",
  "roles" : [ "kibana_user" ]
}
--------------------------------------------------------------------------------

For more information on Basic Authentication and additional methods of authenticating Kibana users, see <<kibana-authentication>>.
// CONSOLE

////
//TO-DO: See https://github.com/elastic/x-pack-kibana/pull/1812
** If you are using an LDAP or Active Directory realm, you can either assign
roles on a per user basis, or assign roles to groups of users. By default, role
mappings are stored in `CONFIGDIR/x-pack/role_mapping.yml`. For more information,
see {xpack-ref}/mapping-roles.html[Mapping Users and Groups to Roles].
For example, the following snippet assigns the `kibana_user` role to the
group named `admins` and the user named Jack Nicholson:
+
--

[source,yaml]
--------------------------------------------------------------------------------
kibana_user:
  - "cn=admins,dc=example,dc=com"
  - "cn=Jack Nicholson,dc=example,dc=com"
--------------------------------------------------------------------------------
--
////
--

. Grant users access to the indices that they will be working with in {kib}.
+
--
TIP: You can define as many different roles for your {kib} users as you need.

For example, create roles that have `read` and `view_index_metadata` privileges
on specific index patterns. For more information, see
{xpack-ref}/authorization.html[Configuring Role-based Access Control].

--

[[configure-kibana-cert]]
. Configure {kib} to encrypt communications between the browser and the {kib}
server:

.. Generate a server certificate for {kib}. You must either set the certificate's
`subjectAltName` to the hostname, fully-qualified domain name (FQDN), or IP
address of the {kib} server, or set the CN to the {kib} server's hostname
or FQDN. Using the server's IP address as the CN does not work.

.. Set the `server.ssl.key` and `server.ssl.certificate` properties in `kibana.yml`:
+
--
[source,yaml]
--------------------------------------------------------------------------------
server.ssl.key: /path/to/your/server.key
server.ssl.certificate: /path/to/your/server.crt
--------------------------------------------------------------------------------

Once you enable SSL encryption between the browser and the {kib} server,
access {kib} via HTTPS. For example, `https://localhost:5601`.
--

[[configure-kibana-ssl]]
. If you have enabled SSL encryption in {security}, configure {kib} to connect
to {es} via HTTPS:

.. Specify the HTTPS protocol in the `elasticsearch.url` setting in the {kib}
configuration file, `kibana.yml`:
+
--
[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.url: "https://<your_elasticsearch_host>.com:9200"
--------------------------------------------------------------------------------
--

.. If you are using your own CA to sign certificates for {es}, set the
`elasticsearch.ssl.certificateAuthorities` setting in `kibana.yml` to specify
the location of the PEM file.
+
--
[source,yaml]
--------------------------------------------------------------------------------
elasticsearch.ssl.certificateAuthorities: /path/to/your/cacert.pem
--------------------------------------------------------------------------------
--

. Restart {kib} and verify that you can log in as a user. If you are running
{kib} locally, go to `https://localhost:5601` and enter the credentials for a
user you've assigned a {kib} user role. For example, you could log in as the
`jacknich` user created above.
+
--
//image::security/images/kibana-login.jpg["Kibana Login",link="images/kibana-login.jpg"]

NOTE: This must be a user who has been assigned the `kibana_user` role.
{kib} server credentials should only be used internally by the {kib} server.

--

include::authentication/index.asciidoc[]
include::{xkb-repo-dir}/settings/security-settings.asciidoc[]
