import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper

version = new JsonSlurper().parse(file('package.json')).version
boolean snapshot = 'true'.equals(System.getProperty('build.snapshot', 'true'));
if (snapshot) {
  version += '-SNAPSHOT'
}

task clean(type: Delete) {
  group = 'Build'
  description = 'Delete all previously built output'
  delete 'build'
  delete 'node_modules'
}

task depInstall(type: Exec) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/C', 'yarn'
  } else {
    commandLine 'yarn'
  }
}

task mochaTests(type: Exec, dependsOn: depInstall) {
  group = 'Verification'
  description = 'Run mocha tests with npm'
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/C', 'npm', 'run', 'test'
  } else {
    commandLine 'xvfb-run', 'npm', 'run', 'test'
  }
}

task functionalTests(type: Exec, dependsOn: depInstall) {
  group = 'Verification'
  description = 'Run functional tests'
  commandLine 'xvfb-run', 'node', 'scripts/functional_tests'
}

task check(dependsOn: [mochaTests, functionalTests]) {
  functionalTests.mustRunAfter mochaTests
  group = 'Verification'
  description = 'Run all verification tasks'
}

task npmBuild(type: Exec, dependsOn: depInstall) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/C', 'npm', 'run', 'build'
  } else {
    commandLine 'npm', 'run', 'build'
  }
  if (System.getProperty('build.snapshot', 'true') == 'false') {
    args '--', '--release'
  }
}

task bundlePlugin(type: Zip, dependsOn: npmBuild) {
  from 'build/plugin'
  destinationDir file('build/distributions')
  baseName = 'x-pack'
  version = project.version
}

task assemble(dependsOn: bundlePlugin) {
  group = 'Build'
  description = 'Assemble the x-pack kibana zip'
}

task build(dependsOn: [check, assemble]) {
  group = 'Build'
  description = 'Assembles and tests the kibana x-pack'
}
