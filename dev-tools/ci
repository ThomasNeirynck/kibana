#!/bin/bash
# This script is used as a single command to run the x-pack-kibana tests.
#
# It will also attempt to install the appropriate version of node.js
# for the Kibana plugin tests using nvm. Set a custom nvm directory using the
# `NVM_DIR` environment variable.
#

# Turn on semi-strict mode
set -e
set -o pipefail

SCRIPT="$0"

# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=$(ls -ld "$SCRIPT")
  # Drop everything prior to ->
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=$(dirname "$SCRIPT")/"$link"
  fi
done

# determine base directory
BASE_DIR=$(dirname "$SCRIPT")/..

# make BASE_DIR absolute
BASE_DIR=$(cd "$BASE_DIR"; pwd)

PARENT_DIR=$(cd "$BASE_DIR"/..; pwd)

# go to the parent directory
cd $PARENT_DIR

function checkout_sibling {
  name=$1
  useExistingParamName=$2
  useExisting="$(eval "echo "\$$useExistingParamName"")"

  if [ -z ${useExisting:+x} ]; then
      if [ -d "./${name}" ]; then
          echo "I expected a clean workspace but an '${name}' sibling directory already exists in [$PARENT_DIR]!"
          echo
          echo "Either define '${useExistingParamName}' or remove the existing '${name}' sibling."
          exit 1
      fi
      BRANCH=${PR_SOURCE_BRANCH:-${GIT_BRANCH#*/}} # GIT_BRANCH starts with the repo, i.e., origin/master
      BRANCH=${BRANCH:-master} # fall back to CI branch if not testing a PR
      echo "Checking if branch '$BRANCH' has ${name} sibling..."
      if [[ -z "$(git ls-remote --heads https://github.com/elastic/${name}.git $BRANCH)" ]]; then
        echo "No sibling branch, using PR target branch"
        BRANCH=$PR_TARGET_BRANCH
      fi
      echo "Checking out ${name} '$BRANCH' branch..."
      git clone -b $BRANCH https://github.com/elastic/${name}.git --depth=1
      printf "Checked out ${name} revision: %s\n" "$(git -C ${name} rev-parse HEAD)"
  else
      if [ -d "./${name}" ]; then
          echo "Using existing '${name}' checkout"
      else
          echo "You have defined '${useExistingParamName}' but no existing ${name} directory exists!"
          exit 2
      fi
  fi
}

checkout_sibling "elasticsearch" "USE_EXISTING_ES"
checkout_sibling "kibana" "USE_EXISTING_KIBANA"

# back to base directory
cd "$BASE_DIR"

# install the correct node.js version
if [ -z ${NVM_DIR:+x} ]; then
  export NVM_DIR="/var/lib/jenkins/.nvm";
fi

NVM_SCRIPT="$NVM_DIR/nvm.sh"
if [ -s "$NVM_SCRIPT" ]; then
  . "$NVM_SCRIPT"  # load nvm
else
  echo "Unable to find the nvm script at \"$NVM_SCRIPT\""
  exit 1
fi

echo "Installing node.js version $(cat .node-version)..."
nvm install "$(cat .node-version)"

echo "Installing kibana dependencies"
cd "../kibana"
npm prune
npm install
cd -

echo "Running x-pack-kibana tests..."
echo "Running in $PWD"

# output the commands
set -xuf

# clean
gradle --stacktrace clean

# Actually run the tests
gradle check

# Confirm that building the project works
gradle assemble

# ~*~ shell-script-mode ~*~
